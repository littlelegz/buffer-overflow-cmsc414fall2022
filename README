In this assignment, you will explore buffer overflows. Make sure
that you test everything on the official course VM.

Security Mechanisms

   * The C compiler uses a security mechanism called "Stack Guard",
     which detects and prevents buffer overflows. We have provided
     you with a Makefile that compiles your code with this disabled
     by default.

   * Additionally, the operating system performs address space
     randomization (ASLR), which does not prevent buffer overflows,
     but makes it much harder for them to result in a successful
     exploit. To disable this, run

        sudo sysctl -w kernel.randomize_va_space=0

     This will prompt you for your user password, unless you've
     configured your VM to allow password-less sudo. The "sudo"
     command allows a normal user to "do" a single command as the
     superuser (ie, root) "su". As the root user, you can edit the
     configuration file for this with the "visudo" command. The
     configuration file is /etc/sudoers (see the manpage for sudoers).

Exploiting a Vulnerable Program

   We have provided you with a vulnerable program in stack.c -- you
   are not to modify this. The Makefile will compile this as needed
   to allow us to exploit it, including making it setuid-root.

   This program has a function bof(), which includes a buffer-overflow
   vulnerability. The program reads 517 bytes from a file named
   "badfile", and then uses memcpy() to write this into a buffer
   of length 32. The file will be your attack vector.

   We have provided you with an initial skeleton for exploit_1.c.
   The term shellcode literally refers to code that starts a command
   shell, like bash. However, nowadays shellcode is considered to be
   any byte code that can be inserted into an exploit to accomplish
   a particular objective. The shellcode provided in exploit_1.c is
   designed to execute the command "cat /var/secret/token". When run
   normally, this command is permission denied since /var is a root
   subdirectory and thus protected. You will attempt to execute this
   command by exploiting the buffer overflow vulnerability in stack.c 

   What to do:

      Write a program named exploit_1.c that generates badfile. It will put
      the following at appropriate places in badfile:

       - shellcode
       - target address in the stack to which control should go
	 when bof() returns; ideally, the address of shellcode
       - NOP instructions to increase the chance of success

      exploit_1 should have exactly one command-line argument: the
      target address in hex format (eg, 0x1234abc).

      Compile and run your program to generate badfile, and then
      run the vulnerable stack program. If your exploit is implemented
      correctly, then when bof() returns it will execute your shellcode,
      printing the contents of /var/secret/token.

      If the target address is 0x1234abc, you would run:

        $ make
        $ ./exploit_1 0x1234abc
        $ ./stack
        seekrit  <-- Contents of /var/secret/token

   How to submit your assignment:

      Create a file in your repository called "address", which
      contains a working argument to exploit_1 as the first line.
      You should also include exploit_1.c in your submission.
      Commit and push your repository to the server.

